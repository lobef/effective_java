/**
 * 本条主要讲解消除过期对象的引用。
 * 过期引用是指永远也不会被消除的引用。 
 * 消除过期引用最好的办法是让包含该引用的变量结束其生命周期
 * 造成内存泄露的来源：
 * 1.对象类自己管理内存，需要警惕内存泄露问题。
 *  解决方案：一旦元素被释放掉，该元素包含的所有对象都应该被清空。
 * 2.缓存。对象放在缓存中，不在使用很长时间，仍然保留在缓存当中
 * 解决方案：1）使用WeakHashMap作为缓存对象，使用该类针对缓存之外存在某项的键的引用。 注意： 缓存项的生命周期是由该键的外部引用决定而不是该键对应的值决定    
 * 		   2）使用定时器（Timer）或者（ScheduledThreaPoolExcutor）来定时清理无效的引用或者过期的引用
 *         3）在给缓存添加新的条目时清理无效引用或者过期引用。LinkedHashMap中的removeEldestEntry方法实现此方式
 *         4）对于更加复杂的缓存必须使用java.lang.ref包中类去解决问题
 * 3.监听器和其他回调
 * 	解决方法：确保回调被当垃圾回收的最佳方案是保存回调函数引用
 * 总结：内存泄露不会出现明显的失败，只有通过检查代码和heap工具进行分析才能发现内存泄露问题，如果能够提前发现问题最好。
 * 
 */
package com.effectivejava.chapter02.item07;