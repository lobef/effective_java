/**
 * 本节讲述的接口优于抽象类(以下是基于java8的effective java第三版，之前都是第二版)
 * 1.java中有两种机制可以用来定义允许多个实现的类型：接口和抽象类
 * 对于这两种java8中允许为某些实例方法提供实现，区别抽象类单根继承，有限制，而接口可以多重实现，灵活的多
 * 2.现有类可以很容易被更新，以实现新的接口，这是由于实现接口的类不受层次限制。抽象类必须放在子类的最上面，这样破坏了类的层次结构
 * 3.接口是定义mixin（混合类型）的理想选择
 * mixin（混合类型）：类除了实现它的基本类型之外，还可以实现这个mixin类型，以表明它提供了某些可供选择的行为
 * 4.接口允许构造非层次接口的类型框架
 * 注意层次臃肿，组合爆炸，这个由于接口的特性太多引起多种组合
 * 5.对缺省方法（在接口中以default关键字修饰的方法）的概括
 * 1）当一个接口方法根据其他接口方法有了明显的实现，可以考虑以缺省方法的形式为程序员提供实现协助
 * 2）缺省方法的帮助是有限的，因为像Object中的equals和hashCode方法虽然在接口中定义了，但是不能提供缺省方法
 * 3）接口中不允许包含实例域或者非公有的静态成员
 * 4）无法给不受你控制的接口添加缺省方法
 * 6.骨架实现
 * 1）定义：骨架实现是某一个接口使用抽象类实现接口中的基本类型的方法，将抽象类和接口的优点结合在一起，接口负责定义类型和提供一些缺省方法
 * 2）骨架实现按照惯例是AbstractInterface，Interface是指所实现的接口的名字，如AbstraceList，AbstractMap，AbstractSet和AbstractCollection等
 * SkeletalList。。。也是有道理的
 * 3）扩展骨架，即骨架实现的子类，负责实现接口之外的大部分工作
 * 4)骨架实现的优点
 * ①为抽象类提供实现上的帮助，但又不强加“抽象类被用作类型定义是”所特有的严格限制
 * ②扩展骨架实现类不是必须，除非使用没有缺省方法或者预置类没有的方法，才手动实现这接口
 * ③可以模拟多重继承，即创建内部类，该内部类实现另一个抽象类或者其他类，骨架实现类等，
 * 5）骨架实现的缺点
 * ①编写过程乏味
 * ②认真研究接口，确定接口哪些方法是最基本的，其他方法可以根据它们来实现，这些基本方法将成为骨架实现类中的抽象方法
 * ③在接口中所有可以在基本方法之上直接实现的方法提供缺省方法
 * 7.骨架实现需要好的文档说明
 * 8.骨架实现上有个小小的不同，就是简单实现，如AbstractMap.SimpleEntry就是这个例子，简单实现类似骨架实现一样，实现了接口，为了继承而设计，区别不是抽象类，可以直接实例化
 * 总结：
 * 接口通常是定义允许多个实现的类型的最佳途径，尽可能在接口中定义缺省方法，这样其他实现类可以直接使用
 * 
 */
package com.effectivejava.chapter04.item20;