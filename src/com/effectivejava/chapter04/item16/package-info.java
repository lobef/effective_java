/**
 * 
 * 本节讲述的是复合优于继承
 * 1.继承非常安全，但是有前提条件的
 * 前提条件：
 * ①类专门为继承设计
 * ②有很好的文档说明
 * ③在同一个程序员的控制之下
 * 2.继承存在的问题
 * ①与方法调用不同，继承破坏了封装性，也就是说子类依赖其父类中特定功能的实现细节。
 * 若父类发生变化，子类可能遭受影响，因此子类必须随着父类变化而变化（com.effectivejava.chapter04.item16.demo.InstrumentedHashSet<T>）
 * 对于子类来说，父类的私有域是无法访问的，可能有些方法无法实现
 * ②父类后续发行版本中可以获得新的方法，这样导致两种结果：
 * 子类已经添加签名相同返回值不同的方法，在父类的后续发行版本中出现相同的签名，导致子类编译不通过。
 * 子类已经添加签名相同返回值相同的方法，在父类的后续发行版本中出现相同的签名，实际是重写父类方法。
 * 3.解决继承存在的问题
 * 使用复合的方式，即创建一个类，这个类包含现有类（要继承的类）
 * 4.复合的优点和限制
 * 优点：几乎没有缺点，灵活，健壮等
 * 限制：不能应用在回调框架中。传递自身对象，绕过外面的包装对象，导致SELF问题
 * 5.什么时候适合使用继承
 * ①子类真正是父类的子类型，也就是说两个类是is a的关系
 * 
 * 
 * 总结：继承非常强大，但是有诸多问题，违背了封装性。
 * 只有子类和父类之间确实存在子类型关系，则使用继承，建议同包中使用，在不同包中使用，建议使用复合，复合功能强大和健壮
 * 
 */
package com.effectivejava.chapter04.item16;